# Define settings for Single-Sign-On with OAuth2; this means that we need to relay the OAuth token
# to the subsequent resources that are proxied by the Zuul api gateway.

# The home definition tells us to allow anonymous access (secure: false) to the static resources that
# are accessed through the Zuul proxy.

# Remaining properties are used by the OAuth2 SSO to determine where the authorization server is and
# what client crendentials to use to access that server.
# Logging settings.
logging:

  # The default level of all loggers. Can be OFF, ERROR, WARN, INFO, DEBUG, TRACE, or ALL.
  level:  
  # config application
    org.springframework.cloud.netflix.zuul: TRACE
    com.ston.vipay.apigateway: DEBUG
    org.springframework.security: DEBUG
  # Logger-specific levels.
  loggers:

    # Redirects SQL logs to a separate file
    org.hibernate.SQL: DEBUG
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG

# Define the port where the API gateway server would be running
server:
  port: 8765
# config bus
spring:
  cloud:
# config rabbitmq
    stream:
      binders:
        rabbit1:
          type: rabbit
          environment:
            spring:
              rabbitmq:
# config ip rabbitmq
                host: 127.0.0.1 
                port: 5672
                username: admin
                password: admin
# config Oauth
serviceOauth:
  login: http://oauth-service/uaa/oauth/token?client_id=
  refresh: http://oauth-service/uaa/oauth/token?grant_type=refresh_token&refresh_token=
  logout: http://oauth-service/uaa/api/logout-up
  account: http://oauth-service/uaa/api/account
  errorOauth: http://localhost:${server.port}

endpoints:
  restart:
    enabled: true
  shutdown:
    enabled: true
  health:
    sensitive: false
#
zuul:
  host:
    connect-timeout-millis: 180000
    socket-timeout-millis: 180000
  sensitiveHeaders:
  routes:
    clients:
      path: /clientbe/**
      serviceId: clients
    ston-query:
      path: /stonq/**
      serviceId: ston-query  
    oauth-service:
      path: /oauth/**
      serviceId: oauth-service
  addProxyHeaders: true
#
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 180000
hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests: 20
hystrix.command.default.execution.timeout.enabled: false
ribbon:
  ConnectTimeout: 180000
  ReadTimeout: 180000
# Define the Eureka server that handles service registration
eureka:
  client:
    serviceUrl:
      #defaultZone: http://actuator:password@localhost:8761/eureka/
      defaultZone: http://localhost:8761/eureka/
  instance:
    metadataMap:
      instanceId: ${spring.application.name}:${server.port}

security:
  basic:
    enabled: false
  oauth2:
    resource:
      userInfoUri: http://localhost:9999/uaa/api/user
      #preferTokenInfo: false
